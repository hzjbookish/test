{"uid":"b42ec3c12e717758","name":"test_collect_delete_tool[正常删除收藏网站]","fullName":"test_case.Collect.test_collect_delete_tool.TestCollectDeleteTool#test_collect_delete_tool","historyId":"4227b7d1001570b9dcacc26866cab5c3","time":{"start":1743951534418,"stop":1743951534636,"duration":218},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.ValueNotFoundError: dependence_case_data下的所有内容均不能为空！请检查相关数据是否填写，如已填写，请检查缩进问题","statusTrace":"self = <utils.requests_tool.dependent_case.DependentCase object at 0x0000024C5BB01DF0>\n\n    def is_dependent(self) -> Union[Dict, bool]:\n        \"\"\"\n        判断是否有数据依赖\n        :return:\n        \"\"\"\n    \n        # 获取用例中的dependent_type值，判断该用例是否需要执行依赖\n        _dependent_type = self.__yaml_case.dependence_case\n        # 获取依赖用例数据\n        _dependence_case_dates = self.__yaml_case.dependence_case_data\n        _setup_sql = self.__yaml_case.setup_sql\n        # 判断是否有依赖\n        if _dependent_type is True:\n            # 读取依赖相关的用例数据\n            jsonpath_dates = {}\n            # 循环所有需要依赖的数据\n            try:\n                for dependence_case_data in _dependence_case_dates:\n                    _case_id = dependence_case_data.case_id\n                    # 判断依赖数据为sql，case_id需要写成self，否则程序中无法获取case_id\n                    if _case_id == 'self':\n                        self._dependent_type_for_sql(\n                            setup_sql=_setup_sql,\n                            dependence_case_data=dependence_case_data,\n                            jsonpath_dates=jsonpath_dates)\n                    else:\n                        re_data = regular(str(self.get_cache(_case_id)))\n                        re_data = ast.literal_eval(cache_regular(str(re_data)))\n>                       res = RequestControl(re_data).http_request()\n\nutils\\requests_tool\\dependent_case.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\n\n    @wraps(func)    # 使用 functools.wraps 装饰 swapper 函数，确保被装饰函数的元信息（如名称、文档字符串等）不会丢失\n    def swapper(*args, **kwargs):   # 这是装饰器的核心逻辑部分，实际执行被装饰函数 func，并根据条件决定是否打印日志。\n    \n        # 判断日志为开启状态，才打印日志\n>       res = func(*args, **kwargs)\n\nutils\\logging_tool\\log_decorator.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\n\n    def swapper(*args, **kwargs):\n>       res = func(*args, **kwargs)\n\nutils\\logging_tool\\run_time_decorator.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\nres = ResponseData(url='https://www.wanandroid.com/lg/collect/addtool/json', is_run=None, detail='新增收藏网址接口', response_data='...data.id)$' WHERE `name` = '2' LIMIT 1\"], body={'name': '自动化', 'link': 'https://gitee.com/yu_xiao_qi/pytest-auto-api2'})\n\n    def swapper(*args, **kwargs):\n        res = func(*args, **kwargs)\n>       _data = res['body']\nE       TypeError: 'ResponseData' object is not subscriptable\n\nutils\\requests_tool\\encryption_algorithm_control.py:56: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_collect_delete_tool.TestCollectDeleteTool object at 0x0000024C5B895D60>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}}, 'current_request_set_cache': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"删除收藏网站接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_delete_tool(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n>       res = RequestControl(in_data).http_request()\n\ntest_case\\Collect\\test_collect_delete_tool.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\logging_tool\\log_decorator.py:24: in swapper\n    res = func(*args, **kwargs)\nutils\\logging_tool\\run_time_decorator.py:19: in swapper\n    res = func(*args, **kwargs)\nutils\\requests_tool\\encryption_algorithm_control.py:55: in swapper\n    res = func(*args, **kwargs)\nutils\\requests_tool\\request_control.py:413: in http_request\n    DependentCase(self.__yaml_case).get_dependent_data()    # 如果 dependent_switch 为 True，则调用 DependentCase 类的 get_dependent_data 方法，获取依赖用例的数据\nutils\\requests_tool\\dependent_case.py:247: in get_dependent_data\n    _dependent_data = DependentCase(self.__yaml_case).is_dependent()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requests_tool.dependent_case.DependentCase object at 0x0000024C5BB01DF0>\n\n    def is_dependent(self) -> Union[Dict, bool]:\n        \"\"\"\n        判断是否有数据依赖\n        :return:\n        \"\"\"\n    \n        # 获取用例中的dependent_type值，判断该用例是否需要执行依赖\n        _dependent_type = self.__yaml_case.dependence_case\n        # 获取依赖用例数据\n        _dependence_case_dates = self.__yaml_case.dependence_case_data\n        _setup_sql = self.__yaml_case.setup_sql\n        # 判断是否有依赖\n        if _dependent_type is True:\n            # 读取依赖相关的用例数据\n            jsonpath_dates = {}\n            # 循环所有需要依赖的数据\n            try:\n                for dependence_case_data in _dependence_case_dates:\n                    _case_id = dependence_case_data.case_id\n                    # 判断依赖数据为sql，case_id需要写成self，否则程序中无法获取case_id\n                    if _case_id == 'self':\n                        self._dependent_type_for_sql(\n                            setup_sql=_setup_sql,\n                            dependence_case_data=dependence_case_data,\n                            jsonpath_dates=jsonpath_dates)\n                    else:\n                        re_data = regular(str(self.get_cache(_case_id)))\n                        re_data = ast.literal_eval(cache_regular(str(re_data)))\n                        res = RequestControl(re_data).http_request()\n                        if dependence_case_data.dependent_data is not None:\n                            dependent_data = dependence_case_data.dependent_data\n                            for i in dependent_data:\n    \n                                _case_id = dependence_case_data.case_id\n                                _jsonpath = i.jsonpath\n                                _request_data = self.__yaml_case.data\n                                _replace_key = self.replace_key(i)\n                                _set_value = self.set_cache_value(i)\n                                # 判断依赖数据类型, 依赖 response 中的数据\n                                if i.dependent_type == DependentType.RESPONSE.value:\n                                    self.dependent_handler(\n                                        data=json.loads(res.response_data),\n                                        _jsonpath=_jsonpath,\n                                        set_value=_set_value,\n                                        replace_key=_replace_key,\n                                        jsonpath_dates=jsonpath_dates,\n                                        dependent_type=0\n                                    )\n    \n                                # 判断依赖数据类型, 依赖 request 中的数据\n                                elif i.dependent_type == DependentType.REQUEST.value:\n                                    self.dependent_handler(\n                                        data=res.body,\n                                        _jsonpath=_jsonpath,\n                                        set_value=_set_value,\n                                        replace_key=_replace_key,\n                                        jsonpath_dates=jsonpath_dates,\n                                        dependent_type=1\n                                    )\n    \n                                else:\n                                    raise ValueError(\n                                        \"依赖的dependent_type不正确，只支持request、response、sql依赖\\n\"\n                                        f\"当前填写内容: {i.dependent_type}\"\n                                    )\n                return jsonpath_dates\n            except KeyError as exc:\n                # pass\n                raise ValueNotFoundError(\n                    f\"dependence_case_data依赖用例中，未找到 {exc} 参数，请检查是否填写\"\n                    f\"如已填写，请检查是否存在yaml缩进问题\"\n                ) from exc\n            except TypeError as exc:\n>               raise ValueNotFoundError(\n                    \"dependence_case_data下的所有内容均不能为空！\"\n                    \"请检查相关数据是否填写，如已填写，请检查缩进问题\"\n                ) from exc\nE               utils.other_tools.exceptions.ValueNotFoundError: dependence_case_data下的所有内容均不能为空！请检查相关数据是否填写，如已填写，请检查缩进问题\n\nutils\\requests_tool\\dependent_case.py:235: ValueNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1743951527523,"stop":1743951527588,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"work_login_init","time":{"start":1743951527588,"stop":1743951528382,"duration":794},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"case_skip","time":{"start":1743951534416,"stop":1743951534417,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.ValueNotFoundError: dependence_case_data下的所有内容均不能为空！请检查相关数据是否填写，如已填写，请检查缩进问题","statusTrace":"self = <utils.requests_tool.dependent_case.DependentCase object at 0x0000024C5BB01DF0>\n\n    def is_dependent(self) -> Union[Dict, bool]:\n        \"\"\"\n        判断是否有数据依赖\n        :return:\n        \"\"\"\n    \n        # 获取用例中的dependent_type值，判断该用例是否需要执行依赖\n        _dependent_type = self.__yaml_case.dependence_case\n        # 获取依赖用例数据\n        _dependence_case_dates = self.__yaml_case.dependence_case_data\n        _setup_sql = self.__yaml_case.setup_sql\n        # 判断是否有依赖\n        if _dependent_type is True:\n            # 读取依赖相关的用例数据\n            jsonpath_dates = {}\n            # 循环所有需要依赖的数据\n            try:\n                for dependence_case_data in _dependence_case_dates:\n                    _case_id = dependence_case_data.case_id\n                    # 判断依赖数据为sql，case_id需要写成self，否则程序中无法获取case_id\n                    if _case_id == 'self':\n                        self._dependent_type_for_sql(\n                            setup_sql=_setup_sql,\n                            dependence_case_data=dependence_case_data,\n                            jsonpath_dates=jsonpath_dates)\n                    else:\n                        re_data = regular(str(self.get_cache(_case_id)))\n                        re_data = ast.literal_eval(cache_regular(str(re_data)))\n>                       res = RequestControl(re_data).http_request()\n\nutils\\requests_tool\\dependent_case.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\n\n    @wraps(func)    # 使用 functools.wraps 装饰 swapper 函数，确保被装饰函数的元信息（如名称、文档字符串等）不会丢失\n    def swapper(*args, **kwargs):   # 这是装饰器的核心逻辑部分，实际执行被装饰函数 func，并根据条件决定是否打印日志。\n    \n        # 判断日志为开启状态，才打印日志\n>       res = func(*args, **kwargs)\n\nutils\\logging_tool\\log_decorator.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\n\n    def swapper(*args, **kwargs):\n>       res = func(*args, **kwargs)\n\nutils\\logging_tool\\run_time_decorator.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<utils.requests_tool.request_control.RequestControl object at 0x0000024C5B8C0130>,), kwargs = {}\nres = ResponseData(url='https://www.wanandroid.com/lg/collect/addtool/json', is_run=None, detail='新增收藏网址接口', response_data='...data.id)$' WHERE `name` = '2' LIMIT 1\"], body={'name': '自动化', 'link': 'https://gitee.com/yu_xiao_qi/pytest-auto-api2'})\n\n    def swapper(*args, **kwargs):\n        res = func(*args, **kwargs)\n>       _data = res['body']\nE       TypeError: 'ResponseData' object is not subscriptable\n\nutils\\requests_tool\\encryption_algorithm_control.py:56: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_collect_delete_tool.TestCollectDeleteTool object at 0x0000024C5B895D60>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}}, 'current_request_set_cache': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"删除收藏网站接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_delete_tool(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n>       res = RequestControl(in_data).http_request()\n\ntest_case\\Collect\\test_collect_delete_tool.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\logging_tool\\log_decorator.py:24: in swapper\n    res = func(*args, **kwargs)\nutils\\logging_tool\\run_time_decorator.py:19: in swapper\n    res = func(*args, **kwargs)\nutils\\requests_tool\\encryption_algorithm_control.py:55: in swapper\n    res = func(*args, **kwargs)\nutils\\requests_tool\\request_control.py:413: in http_request\n    DependentCase(self.__yaml_case).get_dependent_data()    # 如果 dependent_switch 为 True，则调用 DependentCase 类的 get_dependent_data 方法，获取依赖用例的数据\nutils\\requests_tool\\dependent_case.py:247: in get_dependent_data\n    _dependent_data = DependentCase(self.__yaml_case).is_dependent()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requests_tool.dependent_case.DependentCase object at 0x0000024C5BB01DF0>\n\n    def is_dependent(self) -> Union[Dict, bool]:\n        \"\"\"\n        判断是否有数据依赖\n        :return:\n        \"\"\"\n    \n        # 获取用例中的dependent_type值，判断该用例是否需要执行依赖\n        _dependent_type = self.__yaml_case.dependence_case\n        # 获取依赖用例数据\n        _dependence_case_dates = self.__yaml_case.dependence_case_data\n        _setup_sql = self.__yaml_case.setup_sql\n        # 判断是否有依赖\n        if _dependent_type is True:\n            # 读取依赖相关的用例数据\n            jsonpath_dates = {}\n            # 循环所有需要依赖的数据\n            try:\n                for dependence_case_data in _dependence_case_dates:\n                    _case_id = dependence_case_data.case_id\n                    # 判断依赖数据为sql，case_id需要写成self，否则程序中无法获取case_id\n                    if _case_id == 'self':\n                        self._dependent_type_for_sql(\n                            setup_sql=_setup_sql,\n                            dependence_case_data=dependence_case_data,\n                            jsonpath_dates=jsonpath_dates)\n                    else:\n                        re_data = regular(str(self.get_cache(_case_id)))\n                        re_data = ast.literal_eval(cache_regular(str(re_data)))\n                        res = RequestControl(re_data).http_request()\n                        if dependence_case_data.dependent_data is not None:\n                            dependent_data = dependence_case_data.dependent_data\n                            for i in dependent_data:\n    \n                                _case_id = dependence_case_data.case_id\n                                _jsonpath = i.jsonpath\n                                _request_data = self.__yaml_case.data\n                                _replace_key = self.replace_key(i)\n                                _set_value = self.set_cache_value(i)\n                                # 判断依赖数据类型, 依赖 response 中的数据\n                                if i.dependent_type == DependentType.RESPONSE.value:\n                                    self.dependent_handler(\n                                        data=json.loads(res.response_data),\n                                        _jsonpath=_jsonpath,\n                                        set_value=_set_value,\n                                        replace_key=_replace_key,\n                                        jsonpath_dates=jsonpath_dates,\n                                        dependent_type=0\n                                    )\n    \n                                # 判断依赖数据类型, 依赖 request 中的数据\n                                elif i.dependent_type == DependentType.REQUEST.value:\n                                    self.dependent_handler(\n                                        data=res.body,\n                                        _jsonpath=_jsonpath,\n                                        set_value=_set_value,\n                                        replace_key=_replace_key,\n                                        jsonpath_dates=jsonpath_dates,\n                                        dependent_type=1\n                                    )\n    \n                                else:\n                                    raise ValueError(\n                                        \"依赖的dependent_type不正确，只支持request、response、sql依赖\\n\"\n                                        f\"当前填写内容: {i.dependent_type}\"\n                                    )\n                return jsonpath_dates\n            except KeyError as exc:\n                # pass\n                raise ValueNotFoundError(\n                    f\"dependence_case_data依赖用例中，未找到 {exc} 参数，请检查是否填写\"\n                    f\"如已填写，请检查是否存在yaml缩进问题\"\n                ) from exc\n            except TypeError as exc:\n>               raise ValueNotFoundError(\n                    \"dependence_case_data下的所有内容均不能为空！\"\n                    \"请检查相关数据是否填写，如已填写，请检查缩进问题\"\n                ) from exc\nE               utils.other_tools.exceptions.ValueNotFoundError: dependence_case_data下的所有内容均不能为空！请检查相关数据是否填写，如已填写，请检查缩进问题\n\nutils\\requests_tool\\dependent_case.py:235: ValueNotFoundError","steps":[{"name":"请求URL: https://www.wanandroid.com/lg/collect/addtool/json","time":{"start":1743951534634,"stop":1743951534634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"请求方式: POST","time":{"start":1743951534634,"stop":1743951534634,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"请求头: ","time":{"start":1743951534634,"stop":1743951534635,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"18816126749acfb0","name":"请求头: ","source":"18816126749acfb0.json","type":"application/json","size":432}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":true,"hasContent":true},{"name":"请求数据: ","time":{"start":1743951534635,"stop":1743951534635,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"27eb4e6d0398eb37","name":"请求数据: ","source":"27eb4e6d0398eb37.json","type":"application/json","size":80}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":true,"hasContent":true},{"name":"预期数据: ","time":{"start":1743951534635,"stop":1743951534636,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"3d25d1a5a42ffb28","name":"预期数据: ","source":"3d25d1a5a42ffb28.json","type":"application/json","size":126}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":true,"hasContent":true},{"name":"响应耗时(ms): 143","time":{"start":1743951534636,"stop":1743951534636,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"响应结果: ","time":{"start":1743951534636,"stop":1743951534636,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"bc4e52639e9a3b20","name":"响应结果: ","source":"bc4e52639e9a3b20.json","type":"application/json","size":216}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"stepsCount":0,"attachmentStep":true,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"stepsCount":7,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"删除收藏网站接口"},{"name":"epic","value":"开发平台接口"},{"name":"feature","value":"收藏模块"},{"name":"parentSuite","value":"test_case.Collect"},{"name":"suite","value":"test_collect_delete_tool"},{"name":"subSuite","value":"TestCollectDeleteTool"},{"name":"host","value":"DESKTOP-96VNPV2"},{"name":"thread","value":"28564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.Collect.test_collect_delete_tool"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'https://www.wanandroid.com/lg/collect/deletetool/json', 'method': 'POST', 'detail': '正常删除收藏网站', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'DATA', 'is_run': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'collect_addtool_01', 'dependent_data': [{'dependent_type': 'response', 'jsonpath': '$.data.id', 'set_cache': 'collect_delete_tool_01_id', 'replace_key': None}]}], 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"b42ec3c12e717758.json","parameterValues":["{'url': 'https://www.wanandroid.com/lg/collect/deletetool/json', 'method': 'POST', 'detail': '正常删除收藏网站', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'DATA', 'is_run': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'collect_addtool_01', 'dependent_data': [{'dependent_type': 'response', 'jsonpath': '$.data.id', 'set_cache': 'collect_delete_tool_01_id', 'replace_key': None}]}], 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}